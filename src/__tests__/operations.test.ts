import smei from "../smei";

describe("Interpreter", () => {
  const cases = [
    ["3*1/3", 1],
    ["1+2*3", 7],
    ["3+4", 7],
    ["3-4", -1],
    ["-10-20", -30],
    ["-20*3", -60],
    ["-(2+5)", -7],
    ["5*-3", -15],
    ["(3+4)*5", 35],
    ["3*4", 12],
    ["(2+3)*(3+4)", 35],
    ["(2+3)+(3+4)", 12],
    ["(2-3)-(3+4)", -8],
    ["(2+3)/(4+5)", 0.555555555555556],
    ["(2+3)-(2*3)+(1+2)+1", 3],
    ["3/4", 0.75],
    ["3*(-1)/3", -1],
    ["10000000*1000000000000000000", 1e25],
    ["0.1+0.2", 0.3],
    ["0.20/0.5", 0.4],
    ["0.0000007*0.0000007", 4.9e-13],
    ["16.08 * 100", 1608],
    ["1+VARIABLE", 5],
    ["1+AVG(2,2,2,2,2)", 3],
    ["1+AVG(VARIABLE, 4)", 5],
    ["9999999999999999", 9999999999999999],
  ];

  test.each(cases)("%p = %p", (expression: string, result: number) => {
    const AVG = (args: number[]) => {
      return args.reduce((acc, curr) => acc + curr) / args.length;
    };

    expect(smei.eval(expression, { VARIABLE: 4 }, { AVG })).toEqual(result);
  });
});
